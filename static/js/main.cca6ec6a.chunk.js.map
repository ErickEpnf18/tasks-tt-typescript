{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasks","setTasks","taskInput","useRef","addTask","name","newTasks","done","className","onSubmit","e","preventDefault","current","focus","console","log","type","onChange","target","value","ref","autoFocus","map","t","i","style","textDecoration","onClick","toggleDoneTask","splice","removeTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NA0FeA,MAlFf,WACE,MAA8BC,mBAAiB,IAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAkB,IAA5C,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAYC,iBAAyB,MAWrCC,EAAU,SAACC,GACf,IAAMC,EAAQ,sBAAON,GAAP,CAAc,CAAEK,OAAME,MAAM,KAC1CN,EAASK,IAcX,OACE,qBAAKE,UAAU,gBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMC,SAjCD,SAACC,GAAoB,IAAD,EACvCA,EAAEC,iBACFP,EAAQN,GACRC,EAAW,IACX,UAAAG,EAAUU,eAAV,SAAmBC,QACnBC,QAAQC,IAAIf,IA4BE,UACE,uBACEgB,KAAK,OACLC,SAAU,SAACP,GAAD,OAAOX,EAAWW,EAAEQ,OAAOC,QACrCA,MAAOrB,EACPU,UAAU,eACVY,IAAKlB,EACLmB,WAAS,IAEX,wBAAQb,UAAU,iCAAlB,yBAOLR,EAAMsB,KAAI,SAACC,EAAUC,GAAX,OACT,sBAAKhB,UAAU,iBAAf,UACE,oBAAIiB,MAAO,CAAEC,eAAgBH,EAAEhB,KAAO,eAAiB,IAAvD,SACGgB,EAAElB,OAEL,wBACEG,UAAU,oBACVmB,QAAS,kBA1CJ,SAACH,GACtB,IAAMlB,EAAiB,YAAON,GAC9BM,EAASkB,GAAGjB,MAAQD,EAASkB,GAAGjB,KAChCN,EAASK,GAuCsBsB,CAAeJ,IAFhC,SAIGD,EAAEhB,KAAO,SAAM,WAElB,wBACEC,UAAU,kBACVmB,QAAS,kBA1CR,SAACH,GAClB,IAAMlB,EAAiB,YAAON,GAC9BM,EAASuB,OAAOL,EAAG,GACnBvB,EAASK,GAuCsBwB,CAAWN,IAF5B,4BAVmCA,kBClDtCO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cca6ec6a.chunk.js","sourcesContent":["import { useState, useRef } from 'react';\nimport 'bootswatch/dist/vapor/bootstrap.min.css';\n\ntype FormElement = React.FormEvent<HTMLFormElement>;\ninterface ITask {\n  name: string;\n  done: boolean;\n}\nfunction App(): JSX.Element {\n  const [newTask, setNewTask] = useState<string>('');\n  const [tasks, setTasks] = useState<ITask[]>([]);\n  // useRef --> useful to do fastly reference to the input\n  const taskInput = useRef<HTMLInputElement>(null);\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault();\n    addTask(newTask);\n    setNewTask('');\n    taskInput.current?.focus();\n    console.log(tasks);\n    // console.log(\"Submitting\");\n  };\n\n  const addTask = (name: string) => {\n    const newTasks = [...tasks, { name, done: false }];\n    setTasks(newTasks);\n  };\n\n  const toggleDoneTask = (i: number) => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks[i].done = !newTasks[i].done;\n    setTasks(newTasks);\n  };\n\n  const removeTask = (i: number) => {\n    const newTasks: ITask[] = [...tasks];\n    newTasks.splice(i, 1); // remove\n    setTasks(newTasks);\n  };\n  return (\n    <div className='container p-4'>\n      <div className='row'>\n        <div className='col-md-6 offset-md-3'>\n          <div className='card'>\n            <div className='card-body'>\n              <div className='card'>\n                <div className='card-body'>\n                  <form onSubmit={handleSubmit}>\n                    <input\n                      type='text'\n                      onChange={(e) => setNewTask(e.target.value)}\n                      value={newTask}\n                      className='form-control'\n                      ref={taskInput}\n                      autoFocus\n                    />\n                    <button className='btn btn-success btn-block mt-2'>\n                      Save\n                    </button>\n                  </form>\n                </div>\n              </div>\n\n              {tasks.map((t: ITask, i: number) => (\n                <div className='card card-body' key={i}>\n                  <h2 style={{ textDecoration: t.done ? 'line-through' : '' }}>\n                    {t.name}\n                  </h2>\n                  <button\n                    className='btn btn-secondary'\n                    onClick={() => toggleDoneTask(i)}\n                  >\n                    {t.done ? 'âœ…' : 'âœ—'}\n                  </button>\n                  <button\n                    className='btn btn-success'\n                    onClick={() => removeTask(i)}\n                  >\n                    ðŸ—‘\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}